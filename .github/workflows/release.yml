name: Release PASS-UI

on:
  workflow_dispatch:
    inputs:
      releaseversion:
        required: true
        description: Version to release

jobs:
  bump-version:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Config git user
        run: |
          git config user.name ${{ github.actor }}
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Setup Node & Yarn
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'

      - name: Update project version
        run: |
          yarn install --frozen-lockfile
          yarn version --new-version ${{ inputs.releaseversion }}

      - name: Tag and push release version, updating 'main' with new version
        run: |
          git tag ${{ inputs.releaseversion }}
          git push origin main
          git push origin ${{ inputs.releaseversion }}

  release:
    needs: bump-version
    runs-on: ubuntu-latest

    env:
      ENV_FILE: https://raw.githubusercontent.com/eclipse-pass/pass-docker/main/.env
      DOCKER_IMAGE_NAME: ghcr.io/eclipse-pass/pass-ui

    steps:
      - uses: actions/checkout@v3

      - name: Setup Node & Yarn
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: 'yarn'

      - name: Grab '.env' from pass-docker and export vars to environment
        run: |
          wget $ENV_FILE
          export $(grep -v '^[#|SIGNING]' .env | xargs -d '\n')

      - name: Install and build
        run: |
          yarn install --frozen-lockfile
          yarn run build
          yarn run build:docker

      - name: Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Retag and push
        run: |
          docker tag $DOCKER_IMAGE_NAME:latest $DOCKER_IMAGE_NAME:${{ inputs.releaseversion }}
          docker push $DOCKER_IMAGE_NAME:latest
          docker push $DOCKER_IMAGE_NAME:${{ inputs.releaseversion }}
